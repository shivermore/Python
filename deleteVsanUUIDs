#$language = "Python"
#$interface = "1.0"

import os

def Main():
	errorMessages = ""
	# create the SessionList.txt in your home directory, i.e %userprofile%
	sessionsFileName = os.path.expanduser("~") + "\SessionList.txt"
	if not os.path.exists(sessionsFileName):
		crt.Dialog.MessageBox(
			"Session list file not found:\n\n" +
			sessionsFileName + "\n\n" +
			"Create a session list file as described in the description of " +
			"this script code and then run the script again.")
		return
		
	sessionFile = open(sessionsFileName, "r")
	sessionsArray = []
	
	for line in sessionFile:
		session = line.strip()
		if session: # don't add empty lines/sessions
			sessionsArray.append(session)
			
	sessionFile.close()
	passwd = crt.Dialog.Prompt("Enter Password", "Login","", True)
	user = "admin"
	
	# connect to each session and issue a few commands, then disconnect
	for session in sessionsArray:
		# crt.Dialog.MessageBox("Connecting to session: " + session)

		try:
			host = session
			crt.Session.Connect("/L %s /PASSWORD &s %s" % (user, passwd, host))
		except ScriptError:
			error = crt.GetLastErrorMessage()
		
		# If we successfully connected, we'll do the work we intend to do ...
		# otherwise, we'll skip the work and move on the the next session in 
		# the list
		if crt.Session.Connected:
			crt.Screen.Synchronous = True
			
			# When we first connect, there will likely be data arriving from the 
			# remote system.  This is one way of detecting when it's safe to 
			# start sending data
			while True:
				if not crt.Screen.WaitForCursor(1):
					break
			# Once the cursor has stopped moving for about a second, well
			# assume it's safe to start interacting with the remote system
			
			# Get the shell prompt so that we can know what to look for when
			# determining if the command is completed.  Won't work if the prompt
			# is dynamic (e.g. changes according to current working forlder, etc)
			
			uuid = ["uuid", "uuid"]
			
			i = 0
			while i < len(uuid):
				ID = (uuid[i])
				cmd1 = "/usr/lib/vmware/osfs/bin/objtool delete -u " + ID + " -f -v10"
				crt.Screen.Send(cmd1)
				crt.Screen.Send(chr(13))
				crt.screen.waitforstring(prompt)
				i += 1
			
			
			

			# Wait for the command to complete, by looking for the prompt to appear once again
			crt.Screen.WaitForString(prompt)
			
			# now disconnect from the remote machine ..
			crt.Session.Disconnect()
			# wait for the connection to close
			while crt.Session.Connected == True:
				crt.Sleep(100)
				
			crt.Sleep(1000)
		else:
			errorMessages = errorMessages + "\n" + "*** Error connecting to " + session + ": " +error
	
	if errorMessages == "":
		crt.Dialog.MessageBox("Tasks completed.  No errors were detected.")
	else:
		crt.Dialog.MessageBox("Tasks completed.  The following errors occured:\n" + errorMessages)
		
	
Main()
